#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.19408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomMediaLibrary.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MediaDB")]
	public partial class MediaDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAudioToPlaylist(AudioToPlaylist instance);
    partial void UpdateAudioToPlaylist(AudioToPlaylist instance);
    partial void DeleteAudioToPlaylist(AudioToPlaylist instance);
    partial void InsertPlaylist(Playlist instance);
    partial void UpdatePlaylist(Playlist instance);
    partial void DeletePlaylist(Playlist instance);
    partial void InsertMLConfiguration(MLConfiguration instance);
    partial void UpdateMLConfiguration(MLConfiguration instance);
    partial void DeleteMLConfiguration(MLConfiguration instance);
    partial void InsertMediaLibraryLocation(MediaLibraryLocation instance);
    partial void UpdateMediaLibraryLocation(MediaLibraryLocation instance);
    partial void DeleteMediaLibraryLocation(MediaLibraryLocation instance);
    partial void InsertFileFilter(FileFilter instance);
    partial void UpdateFileFilter(FileFilter instance);
    partial void DeleteFileFilter(FileFilter instance);
    partial void InsertAudio(Audio instance);
    partial void UpdateAudio(Audio instance);
    partial void DeleteAudio(Audio instance);
    #endregion
		
		public MediaDBDataContext() : 
				base(global::CustomMediaLibrary.Properties.Settings.Default.MediaDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public MediaDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MediaDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AudioToPlaylist> AudioToPlaylists
		{
			get
			{
				return this.GetTable<AudioToPlaylist>();
			}
		}
		
		public System.Data.Linq.Table<Playlist> Playlists
		{
			get
			{
				return this.GetTable<Playlist>();
			}
		}
		
		public System.Data.Linq.Table<MLConfiguration> MLConfigurations
		{
			get
			{
				return this.GetTable<MLConfiguration>();
			}
		}
		
		public System.Data.Linq.Table<MediaLibraryLocation> MediaLibraryLocations
		{
			get
			{
				return this.GetTable<MediaLibraryLocation>();
			}
		}
		
		public System.Data.Linq.Table<FileFilter> FileFilters
		{
			get
			{
				return this.GetTable<FileFilter>();
			}
		}
		
		public System.Data.Linq.Table<Audio> Audios
		{
			get
			{
				return this.GetTable<Audio>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AudioToPlaylist")]
	public partial class AudioToPlaylist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PlaylistID;
		
		private int _AudioID;
		
		private EntityRef<Playlist> _Playlist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlaylistIDChanging(int value);
    partial void OnPlaylistIDChanged();
    partial void OnAudioIDChanging(int value);
    partial void OnAudioIDChanged();
    #endregion
		
		public AudioToPlaylist()
		{
			this._Playlist = default(EntityRef<Playlist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaylistID", DbType="Int NOT NULL")]
		public int PlaylistID
		{
			get
			{
				return this._PlaylistID;
			}
			set
			{
				if ((this._PlaylistID != value))
				{
					if (this._Playlist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaylistIDChanging(value);
					this.SendPropertyChanging();
					this._PlaylistID = value;
					this.SendPropertyChanged("PlaylistID");
					this.OnPlaylistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioID", DbType="Int NOT NULL")]
		public int AudioID
		{
			get
			{
				return this._AudioID;
			}
			set
			{
				if ((this._AudioID != value))
				{
					this.OnAudioIDChanging(value);
					this.SendPropertyChanging();
					this._AudioID = value;
					this.SendPropertyChanged("AudioID");
					this.OnAudioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Playlist_AudioToPlaylist", Storage="_Playlist", ThisKey="PlaylistID", OtherKey="Id", IsForeignKey=true)]
		public Playlist Playlist
		{
			get
			{
				return this._Playlist.Entity;
			}
			set
			{
				Playlist previousValue = this._Playlist.Entity;
				if (((previousValue != value) 
							|| (this._Playlist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Playlist.Entity = null;
						previousValue.AudioToPlaylists.Remove(this);
					}
					this._Playlist.Entity = value;
					if ((value != null))
					{
						value.AudioToPlaylists.Add(this);
						this._PlaylistID = value.Id;
					}
					else
					{
						this._PlaylistID = default(int);
					}
					this.SendPropertyChanged("Playlist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Playlists")]
	public partial class Playlist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<AudioToPlaylist> _AudioToPlaylists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Playlist()
		{
			this._AudioToPlaylists = new EntitySet<AudioToPlaylist>(new Action<AudioToPlaylist>(this.attach_AudioToPlaylists), new Action<AudioToPlaylist>(this.detach_AudioToPlaylists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Playlist_AudioToPlaylist", Storage="_AudioToPlaylists", ThisKey="Id", OtherKey="PlaylistID")]
		public EntitySet<AudioToPlaylist> AudioToPlaylists
		{
			get
			{
				return this._AudioToPlaylists;
			}
			set
			{
				this._AudioToPlaylists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AudioToPlaylists(AudioToPlaylist entity)
		{
			this.SendPropertyChanging();
			entity.Playlist = this;
		}
		
		private void detach_AudioToPlaylists(AudioToPlaylist entity)
		{
			this.SendPropertyChanging();
			entity.Playlist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MLConfiguration")]
	public partial class MLConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ConfigurationName;
		
		private string _ConfigurationValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnConfigurationNameChanging(string value);
    partial void OnConfigurationNameChanged();
    partial void OnConfigurationValueChanging(string value);
    partial void OnConfigurationValueChanged();
    #endregion
		
		public MLConfiguration()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigurationName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ConfigurationName
		{
			get
			{
				return this._ConfigurationName;
			}
			set
			{
				if ((this._ConfigurationName != value))
				{
					this.OnConfigurationNameChanging(value);
					this.SendPropertyChanging();
					this._ConfigurationName = value;
					this.SendPropertyChanged("ConfigurationName");
					this.OnConfigurationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigurationValue", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ConfigurationValue
		{
			get
			{
				return this._ConfigurationValue;
			}
			set
			{
				if ((this._ConfigurationValue != value))
				{
					this.OnConfigurationValueChanging(value);
					this.SendPropertyChanging();
					this._ConfigurationValue = value;
					this.SendPropertyChanged("ConfigurationValue");
					this.OnConfigurationValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MediaLibraryLocations")]
	public partial class MediaLibraryLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
		
		public MediaLibraryLocation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileFilters")]
	public partial class FileFilter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Filter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFilterChanging(string value);
    partial void OnFilterChanged();
    #endregion
		
		public FileFilter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filter", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Filter
		{
			get
			{
				return this._Filter;
			}
			set
			{
				if ((this._Filter != value))
				{
					this.OnFilterChanging(value);
					this.SendPropertyChanging();
					this._Filter = value;
					this.SendPropertyChanged("Filter");
					this.OnFilterChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Audio")]
	public partial class Audio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _FileName;
		
		private string _FilePath;
		
		private string _FileType;
		
		private System.Nullable<bool> _IsDeletedFromDB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileTypeChanging(string value);
    partial void OnFileTypeChanged();
    partial void OnIsDeletedFromDBChanging(System.Nullable<bool> value);
    partial void OnIsDeletedFromDBChanged();
    #endregion
		
		public Audio()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FileType
		{
			get
			{
				return this._FileType;
			}
			set
			{
				if ((this._FileType != value))
				{
					this.OnFileTypeChanging(value);
					this.SendPropertyChanging();
					this._FileType = value;
					this.SendPropertyChanged("FileType");
					this.OnFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeletedFromDB", DbType="Bit")]
		public System.Nullable<bool> IsDeletedFromDB
		{
			get
			{
				return this._IsDeletedFromDB;
			}
			set
			{
				if ((this._IsDeletedFromDB != value))
				{
					this.OnIsDeletedFromDBChanging(value);
					this.SendPropertyChanging();
					this._IsDeletedFromDB = value;
					this.SendPropertyChanged("IsDeletedFromDB");
					this.OnIsDeletedFromDBChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
